[argument([[s1, o1, h1, d1], d1, [domain(kbins, n_bins, [3, 7])], [hyperparameter(kbins, n_bins, randint)], [[d1], [o1, h1, d1], [s1]]]), argument([[s1, o1, h2, d2], d2, [domain(kbins, encode, [onehot, 'onehot-dense', ordinal])], [hyperparameter(kbins, encode, choice)], [[d2], [o1, h2, d2], [s1]]]), argument([[s1, o1, h3, d3], d3, [domain(kbins, strategy, [uniform, quantile, kmeans])], [hyperparameter(kbins, strategy, choice)], [[d3], [o1, h3, d3], [s1]]]), argument([[s1, o2, h4, d4], d4, [domain(binarizer, threshold, [0.0, 0.5, 2.0, 5.0])], [hyperparameter(binarizer, threshold, choice)], [[d4], [o2, h4, d4], [s1]]]), argument([[s1, o4, h5, d5], d5, [domain(robust_scaler, with_centering, [true, false])], [hyperparameter(robust_scaler, with_centering, choice)], [[d5], [o4, h5, d5], [s1]]]), argument([[s1, o4, h6, d6], d6, [domain(robust_scaler, with_scaling, [true, false])], [hyperparameter(robust_scaler, with_scaling, choice)], [[d6], [o4, h6, d6], [s1]]]), argument([[s1, o5, h7, d7], d7, [domain(standard, with_mean, [true, false])], [hyperparameter(standard, with_mean, choice)], [[d7], [o5, h7, d7], [s1]]]), argument([[s1, o5, h8, d8], d8, [domain(standard, with_std, [true, false])], [hyperparameter(standard, with_std, choice)], [[d8], [o5, h8, d8], [s1]]]), argument([[sc1, oc1, hc1, dc1], dc1, [domain(dt, max_depth, [1, 4])], [hyperparameter(dt, max_depth, randint)], [[dc1], [oc1, hc1, dc1], [sc1]]]), argument([[sc1, oc1, hc2, dc2], dc2, [domain(dt, min_samples_split, [2, 5])], [hyperparameter(dt, min_samples_split, randint)], [[dc2], [oc1, hc2, dc2], [sc1]]]), argument([[sc1, oc1, hc3, dc3], dc3, [domain(dt, min_samples_leaf, [1, 5])], [hyperparameter(dt, min_samples_leaf, randint)], [[dc3], [oc1, hc3, dc3], [sc1]]]), argument([[sc1, oc1, hc4, dc4], dc4, [domain(dt, max_features, [1, 3])], [hyperparameter(dt, max_features, randint)], [[dc4], [oc1, hc4, dc4], [sc1]]]), argument([[sc1, oc1, hc5, dc5], dc5, [domain(dt, max_leaf_nodes, [2, 5])], [hyperparameter(dt, max_leaf_nodes, randint)], [[dc5], [oc1, hc5, dc5], [sc1]]]), argument([[sc1, oc1, hc6, dc6], dc6, [domain(dt, splitter, [best, random])], [hyperparameter(dt, splitter, choice)], [[dc6], [oc1, hc6, dc6], [sc1]]]), argument([[sc1, oc1, hc7, dc7], dc7, [domain(dt, criterion, [gini, entropy])], [hyperparameter(dt, criterion, choice)], [[dc7], [oc1, hc7, dc7], [sc1]]]), argument([[sc1, oc2, hc8, dc8], dc8, [domain(knn, n_neighbors, [3, 19])], [hyperparameter(knn, n_neighbors, randint)], [[dc8], [oc2, hc8, dc8], [sc1]]]), argument([[sc1, oc2, hc9, dc9], dc9, [domain(knn, weights, [uniform, distance])], [hyperparameter(knn, weights, choice)], [[dc9], [oc2, hc9, dc9], [sc1]]]), argument([[sc1, oc2, hc10, dc10], dc10, [domain(knn, metric, [minkowski, euclidean, manhattan])], [hyperparameter(knn, metric, choice)], [[dc10], [oc2, hc10, dc10], [sc1]]]), argument([[sc1, oc2, g0], g0, [pipeline([], knn)], [operator(classification, knn)], [[g0], [oc2, g0], [sc1]]]), argument([[sc1, oc1, g0], g0, [pipeline([], dt)], [operator(classification, dt)], [[g0], [oc1, g0], [sc1]]]), argument([[s1, o1, h1], h1, [hyperparameter(kbins, n_bins, randint)], [operator(discretization, kbins)], [[h1], [o1, h1], [s1]]]), argument([[s1, o1, h2], h2, [hyperparameter(kbins, encode, choice)], [operator(discretization, kbins)], [[h2], [o1, h2], [s1]]]), argument([[s1, o1, h3], h3, [hyperparameter(kbins, strategy, choice)], [operator(discretization, kbins)], [[h3], [o1, h3], [s1]]]), argument([[s1, o2, h4], h4, [hyperparameter(binarizer, threshold, choice)], [operator(discretization, binarizer)], [[h4], [o2, h4], [s1]]]), argument([[s1, o4, h5], h5, [hyperparameter(robust_scaler, with_centering, choice)], [operator(normalization, robust_scaler)], [[h5], [o4, h5], [s1]]]), argument([[s1, o4, h6], h6, [hyperparameter(robust_scaler, with_scaling, choice)], [operator(normalization, robust_scaler)], [[h6], [o4, h6], [s1]]]), argument([[s1, o5, h7], h7, [hyperparameter(standard, with_mean, choice)], [operator(normalization, standard)], [[h7], [o5, h7], [s1]]]), argument([[s1, o5, h8], h8, [hyperparameter(standard, with_std, choice)], [operator(normalization, standard)], [[h8], [o5, h8], [s1]]]), argument([[sc1, oc1, hc1], hc1, [hyperparameter(dt, max_depth, randint)], [operator(classification, dt)], [[hc1], [oc1, hc1], [sc1]]]), argument([[sc1, oc1, hc2], hc2, [hyperparameter(dt, min_samples_split, randint)], [operator(classification, dt)], [[hc2], [oc1, hc2], [sc1]]]), argument([[sc1, oc1, hc3], hc3, [hyperparameter(dt, min_samples_leaf, randint)], [operator(classification, dt)], [[hc3], [oc1, hc3], [sc1]]]), argument([[sc1, oc1, hc4], hc4, [hyperparameter(dt, max_features, randint)], [operator(classification, dt)], [[hc4], [oc1, hc4], [sc1]]]), argument([[sc1, oc1, hc5], hc5, [hyperparameter(dt, max_leaf_nodes, randint)], [operator(classification, dt)], [[hc5], [oc1, hc5], [sc1]]]), argument([[sc1, oc1, hc6], hc6, [hyperparameter(dt, splitter, choice)], [operator(classification, dt)], [[hc6], [oc1, hc6], [sc1]]]), argument([[sc1, oc1, hc7], hc7, [hyperparameter(dt, criterion, choice)], [operator(classification, dt)], [[hc7], [oc1, hc7], [sc1]]]), argument([[sc1, oc2, hc8], hc8, [hyperparameter(knn, n_neighbors, randint)], [operator(classification, knn)], [[hc8], [oc2, hc8], [sc1]]]), argument([[sc1, oc2, hc9], hc9, [hyperparameter(knn, weights, choice)], [operator(classification, knn)], [[hc9], [oc2, hc9], [sc1]]]), argument([[sc1, oc2, hc10], hc10, [hyperparameter(knn, metric, choice)], [operator(classification, knn)], [[hc10], [oc2, hc10], [sc1]]]), argument([[sc1, s1, oc2, g1], g1, [pipeline([normalization], knn)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), argument([[sc1, s1, oc1, g1], g1, [pipeline([normalization], dt)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), argument([[sc1, s1, oc2, g1], g1, [pipeline([discretization], knn)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), argument([[sc1, s1, oc1, g1], g1, [pipeline([discretization], dt)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), argument([[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), argument([[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), argument([[sc1, s1, s1, oc2, g2], g2, [pipeline([discretization, normalization], knn)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), argument([[sc1, s1, s1, oc1, g2], g2, [pipeline([discretization, normalization], dt)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), argument([[sc1, oc2, cco1, c1], cco1, [mandatory_order([discretization, normalization], knn)], [mandatory_order([discretization, normalization], classification), operator(classification, knn)], [[cco1], [oc2, cco1], [sc1, c1]]]), argument([[sc1, oc1, cco1, c1], cco1, [mandatory_order([discretization, normalization], dt)], [mandatory_order([discretization, normalization], classification), operator(classification, dt)], [[cco1], [oc1, cco1], [sc1, c1]]]), argument([[s1, o1], o1, [operator(discretization, kbins)], [step(discretization)], [[o1], [o1], [s1]]]), argument([[s1, o2], o2, [operator(discretization, binarizer)], [step(discretization)], [[o2], [o2], [s1]]]), argument([[s1, o3], o3, [operator(normalization, power_transformer)], [step(normalization)], [[o3], [o3], [s1]]]), argument([[s1, o4], o4, [operator(normalization, robust_scaler)], [step(normalization)], [[o4], [o4], [s1]]]), argument([[s1, o5], o5, [operator(normalization, standard)], [step(normalization)], [[o5], [o5], [s1]]]), argument([[s1, o6], o6, [operator(normalization, minmax)], [step(normalization)], [[o6], [o6], [s1]]]), argument([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]]), argument([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]]), argument([[s1], none, [step(discretization)], [], [[], [], [s1]]]), argument([[s1], none, [step(normalization)], [], [[], [], [s1]]]), argument([[sc1], none, [step(classification)], [], [[], [], [sc1]]]), argument([[c1], none, [mandatory_order([discretization, normalization], classification)], [], [[], [], [c1]]]), support([[s1, o1, h1], h1, [hyperparameter(kbins, n_bins, randint)], [operator(discretization, kbins)], [[h1], [o1, h1], [s1]]], [[s1, o1, h1, d1], d1, [domain(kbins, n_bins, [3, 7])], [hyperparameter(kbins, n_bins, randint)], [[d1], [o1, h1, d1], [s1]]]), support([[s1, o1, h2], h2, [hyperparameter(kbins, encode, choice)], [operator(discretization, kbins)], [[h2], [o1, h2], [s1]]], [[s1, o1, h2, d2], d2, [domain(kbins, encode, [onehot, 'onehot-dense', ordinal])], [hyperparameter(kbins, encode, choice)], [[d2], [o1, h2, d2], [s1]]]), support([[s1, o1, h3], h3, [hyperparameter(kbins, strategy, choice)], [operator(discretization, kbins)], [[h3], [o1, h3], [s1]]], [[s1, o1, h3, d3], d3, [domain(kbins, strategy, [uniform, quantile, kmeans])], [hyperparameter(kbins, strategy, choice)], [[d3], [o1, h3, d3], [s1]]]), support([[s1, o2, h4], h4, [hyperparameter(binarizer, threshold, choice)], [operator(discretization, binarizer)], [[h4], [o2, h4], [s1]]], [[s1, o2, h4, d4], d4, [domain(binarizer, threshold, [0.0, 0.5, 2.0, 5.0])], [hyperparameter(binarizer, threshold, choice)], [[d4], [o2, h4, d4], [s1]]]), support([[s1, o4, h5], h5, [hyperparameter(robust_scaler, with_centering, choice)], [operator(normalization, robust_scaler)], [[h5], [o4, h5], [s1]]], [[s1, o4, h5, d5], d5, [domain(robust_scaler, with_centering, [true, false])], [hyperparameter(robust_scaler, with_centering, choice)], [[d5], [o4, h5, d5], [s1]]]), support([[s1, o4, h6], h6, [hyperparameter(robust_scaler, with_scaling, choice)], [operator(normalization, robust_scaler)], [[h6], [o4, h6], [s1]]], [[s1, o4, h6, d6], d6, [domain(robust_scaler, with_scaling, [true, false])], [hyperparameter(robust_scaler, with_scaling, choice)], [[d6], [o4, h6, d6], [s1]]]), support([[s1, o5, h7], h7, [hyperparameter(standard, with_mean, choice)], [operator(normalization, standard)], [[h7], [o5, h7], [s1]]], [[s1, o5, h7, d7], d7, [domain(standard, with_mean, [true, false])], [hyperparameter(standard, with_mean, choice)], [[d7], [o5, h7, d7], [s1]]]), support([[s1, o5, h8], h8, [hyperparameter(standard, with_std, choice)], [operator(normalization, standard)], [[h8], [o5, h8], [s1]]], [[s1, o5, h8, d8], d8, [domain(standard, with_std, [true, false])], [hyperparameter(standard, with_std, choice)], [[d8], [o5, h8, d8], [s1]]]), support([[sc1, oc1, hc1], hc1, [hyperparameter(dt, max_depth, randint)], [operator(classification, dt)], [[hc1], [oc1, hc1], [sc1]]], [[sc1, oc1, hc1, dc1], dc1, [domain(dt, max_depth, [1, 4])], [hyperparameter(dt, max_depth, randint)], [[dc1], [oc1, hc1, dc1], [sc1]]]), support([[sc1, oc1, hc2], hc2, [hyperparameter(dt, min_samples_split, randint)], [operator(classification, dt)], [[hc2], [oc1, hc2], [sc1]]], [[sc1, oc1, hc2, dc2], dc2, [domain(dt, min_samples_split, [2, 5])], [hyperparameter(dt, min_samples_split, randint)], [[dc2], [oc1, hc2, dc2], [sc1]]]), support([[sc1, oc1, hc3], hc3, [hyperparameter(dt, min_samples_leaf, randint)], [operator(classification, dt)], [[hc3], [oc1, hc3], [sc1]]], [[sc1, oc1, hc3, dc3], dc3, [domain(dt, min_samples_leaf, [1, 5])], [hyperparameter(dt, min_samples_leaf, randint)], [[dc3], [oc1, hc3, dc3], [sc1]]]), support([[sc1, oc1, hc4], hc4, [hyperparameter(dt, max_features, randint)], [operator(classification, dt)], [[hc4], [oc1, hc4], [sc1]]], [[sc1, oc1, hc4, dc4], dc4, [domain(dt, max_features, [1, 3])], [hyperparameter(dt, max_features, randint)], [[dc4], [oc1, hc4, dc4], [sc1]]]), support([[sc1, oc1, hc5], hc5, [hyperparameter(dt, max_leaf_nodes, randint)], [operator(classification, dt)], [[hc5], [oc1, hc5], [sc1]]], [[sc1, oc1, hc5, dc5], dc5, [domain(dt, max_leaf_nodes, [2, 5])], [hyperparameter(dt, max_leaf_nodes, randint)], [[dc5], [oc1, hc5, dc5], [sc1]]]), support([[sc1, oc1, hc6], hc6, [hyperparameter(dt, splitter, choice)], [operator(classification, dt)], [[hc6], [oc1, hc6], [sc1]]], [[sc1, oc1, hc6, dc6], dc6, [domain(dt, splitter, [best, random])], [hyperparameter(dt, splitter, choice)], [[dc6], [oc1, hc6, dc6], [sc1]]]), support([[sc1, oc1, hc7], hc7, [hyperparameter(dt, criterion, choice)], [operator(classification, dt)], [[hc7], [oc1, hc7], [sc1]]], [[sc1, oc1, hc7, dc7], dc7, [domain(dt, criterion, [gini, entropy])], [hyperparameter(dt, criterion, choice)], [[dc7], [oc1, hc7, dc7], [sc1]]]), support([[sc1, oc2, hc8], hc8, [hyperparameter(knn, n_neighbors, randint)], [operator(classification, knn)], [[hc8], [oc2, hc8], [sc1]]], [[sc1, oc2, hc8, dc8], dc8, [domain(knn, n_neighbors, [3, 19])], [hyperparameter(knn, n_neighbors, randint)], [[dc8], [oc2, hc8, dc8], [sc1]]]), support([[sc1, oc2, hc9], hc9, [hyperparameter(knn, weights, choice)], [operator(classification, knn)], [[hc9], [oc2, hc9], [sc1]]], [[sc1, oc2, hc9, dc9], dc9, [domain(knn, weights, [uniform, distance])], [hyperparameter(knn, weights, choice)], [[dc9], [oc2, hc9, dc9], [sc1]]]), support([[sc1, oc2, hc10], hc10, [hyperparameter(knn, metric, choice)], [operator(classification, knn)], [[hc10], [oc2, hc10], [sc1]]], [[sc1, oc2, hc10, dc10], dc10, [domain(knn, metric, [minkowski, euclidean, manhattan])], [hyperparameter(knn, metric, choice)], [[dc10], [oc2, hc10, dc10], [sc1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, oc2, g0], g0, [pipeline([], knn)], [operator(classification, knn)], [[g0], [oc2, g0], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, g0], g0, [pipeline([], dt)], [operator(classification, dt)], [[g0], [oc1, g0], [sc1]]]), support([[s1, o1], o1, [operator(discretization, kbins)], [step(discretization)], [[o1], [o1], [s1]]], [[s1, o1, h1], h1, [hyperparameter(kbins, n_bins, randint)], [operator(discretization, kbins)], [[h1], [o1, h1], [s1]]]), support([[s1, o1], o1, [operator(discretization, kbins)], [step(discretization)], [[o1], [o1], [s1]]], [[s1, o1, h2], h2, [hyperparameter(kbins, encode, choice)], [operator(discretization, kbins)], [[h2], [o1, h2], [s1]]]), support([[s1, o1], o1, [operator(discretization, kbins)], [step(discretization)], [[o1], [o1], [s1]]], [[s1, o1, h3], h3, [hyperparameter(kbins, strategy, choice)], [operator(discretization, kbins)], [[h3], [o1, h3], [s1]]]), support([[s1, o2], o2, [operator(discretization, binarizer)], [step(discretization)], [[o2], [o2], [s1]]], [[s1, o2, h4], h4, [hyperparameter(binarizer, threshold, choice)], [operator(discretization, binarizer)], [[h4], [o2, h4], [s1]]]), support([[s1, o4], o4, [operator(normalization, robust_scaler)], [step(normalization)], [[o4], [o4], [s1]]], [[s1, o4, h5], h5, [hyperparameter(robust_scaler, with_centering, choice)], [operator(normalization, robust_scaler)], [[h5], [o4, h5], [s1]]]), support([[s1, o4], o4, [operator(normalization, robust_scaler)], [step(normalization)], [[o4], [o4], [s1]]], [[s1, o4, h6], h6, [hyperparameter(robust_scaler, with_scaling, choice)], [operator(normalization, robust_scaler)], [[h6], [o4, h6], [s1]]]), support([[s1, o5], o5, [operator(normalization, standard)], [step(normalization)], [[o5], [o5], [s1]]], [[s1, o5, h7], h7, [hyperparameter(standard, with_mean, choice)], [operator(normalization, standard)], [[h7], [o5, h7], [s1]]]), support([[s1, o5], o5, [operator(normalization, standard)], [step(normalization)], [[o5], [o5], [s1]]], [[s1, o5, h8], h8, [hyperparameter(standard, with_std, choice)], [operator(normalization, standard)], [[h8], [o5, h8], [s1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc1], hc1, [hyperparameter(dt, max_depth, randint)], [operator(classification, dt)], [[hc1], [oc1, hc1], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc2], hc2, [hyperparameter(dt, min_samples_split, randint)], [operator(classification, dt)], [[hc2], [oc1, hc2], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc3], hc3, [hyperparameter(dt, min_samples_leaf, randint)], [operator(classification, dt)], [[hc3], [oc1, hc3], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc4], hc4, [hyperparameter(dt, max_features, randint)], [operator(classification, dt)], [[hc4], [oc1, hc4], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc5], hc5, [hyperparameter(dt, max_leaf_nodes, randint)], [operator(classification, dt)], [[hc5], [oc1, hc5], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc6], hc6, [hyperparameter(dt, splitter, choice)], [operator(classification, dt)], [[hc6], [oc1, hc6], [sc1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, hc7], hc7, [hyperparameter(dt, criterion, choice)], [operator(classification, dt)], [[hc7], [oc1, hc7], [sc1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, oc2, hc8], hc8, [hyperparameter(knn, n_neighbors, randint)], [operator(classification, knn)], [[hc8], [oc2, hc8], [sc1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, oc2, hc9], hc9, [hyperparameter(knn, weights, choice)], [operator(classification, knn)], [[hc9], [oc2, hc9], [sc1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, oc2, hc10], hc10, [hyperparameter(knn, metric, choice)], [operator(classification, knn)], [[hc10], [oc2, hc10], [sc1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[sc1, s1, oc2, g1], g1, [pipeline([normalization], knn)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, s1, oc2, g1], g1, [pipeline([normalization], knn)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[sc1, s1, oc1, g1], g1, [pipeline([normalization], dt)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, s1, oc1, g1], g1, [pipeline([normalization], dt)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[sc1, s1, oc2, g1], g1, [pipeline([discretization], knn)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, s1, oc2, g1], g1, [pipeline([discretization], knn)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[sc1, s1, oc1, g1], g1, [pipeline([discretization], dt)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, s1, oc1, g1], g1, [pipeline([discretization], dt)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([discretization, normalization], knn)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([discretization, normalization], knn)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([discretization, normalization], knn)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([discretization, normalization], dt)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([discretization, normalization], dt)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([discretization, normalization], dt)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), support([[c1], none, [mandatory_order([discretization, normalization], classification)], [], [[], [], [c1]]], [[sc1, oc2, cco1, c1], cco1, [mandatory_order([discretization, normalization], knn)], [mandatory_order([discretization, normalization], classification), operator(classification, knn)], [[cco1], [oc2, cco1], [sc1, c1]]]), support([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]], [[sc1, oc2, cco1, c1], cco1, [mandatory_order([discretization, normalization], knn)], [mandatory_order([discretization, normalization], classification), operator(classification, knn)], [[cco1], [oc2, cco1], [sc1, c1]]]), support([[c1], none, [mandatory_order([discretization, normalization], classification)], [], [[], [], [c1]]], [[sc1, oc1, cco1, c1], cco1, [mandatory_order([discretization, normalization], dt)], [mandatory_order([discretization, normalization], classification), operator(classification, dt)], [[cco1], [oc1, cco1], [sc1, c1]]]), support([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]], [[sc1, oc1, cco1, c1], cco1, [mandatory_order([discretization, normalization], dt)], [mandatory_order([discretization, normalization], classification), operator(classification, dt)], [[cco1], [oc1, cco1], [sc1, c1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[s1, o1], o1, [operator(discretization, kbins)], [step(discretization)], [[o1], [o1], [s1]]]), support([[s1], none, [step(discretization)], [], [[], [], [s1]]], [[s1, o2], o2, [operator(discretization, binarizer)], [step(discretization)], [[o2], [o2], [s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[s1, o3], o3, [operator(normalization, power_transformer)], [step(normalization)], [[o3], [o3], [s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[s1, o4], o4, [operator(normalization, robust_scaler)], [step(normalization)], [[o4], [o4], [s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[s1, o5], o5, [operator(normalization, standard)], [step(normalization)], [[o5], [o5], [s1]]]), support([[s1], none, [step(normalization)], [], [[], [], [s1]]], [[s1, o6], o6, [operator(normalization, minmax)], [step(normalization)], [[o6], [o6], [s1]]]), support([[sc1], none, [step(classification)], [], [[], [], [sc1]]], [[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]]), support([[sc1], none, [step(classification)], [], [[], [], [sc1]]], [[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]]), attack(rebut, [[sc1, oc1, cco1, c1], cco1, [mandatory_order([discretization, normalization], dt)], [mandatory_order([discretization, normalization], classification), operator(classification, dt)], [[cco1], [oc1, cco1], [sc1, c1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]], [[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), attack(rebut, [[sc1, oc2, cco1, c1], cco1, [mandatory_order([discretization, normalization], knn)], [mandatory_order([discretization, normalization], classification), operator(classification, knn)], [[cco1], [oc2, cco1], [sc1, c1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]], [[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), in([[c1], none, [mandatory_order([discretization, normalization], classification)], [], [[], [], [c1]]]), in([[sc1], none, [step(classification)], [], [[], [], [sc1]]]), in([[s1], none, [step(normalization)], [], [[], [], [s1]]]), in([[s1], none, [step(discretization)], [], [[], [], [s1]]]), in([[sc1, oc2], oc2, [operator(classification, knn)], [step(classification)], [[oc2], [oc2], [sc1]]]), in([[sc1, oc1], oc1, [operator(classification, dt)], [step(classification)], [[oc1], [oc1], [sc1]]]), in([[s1, o6], o6, [operator(normalization, minmax)], [step(normalization)], [[o6], [o6], [s1]]]), in([[s1, o5], o5, [operator(normalization, standard)], [step(normalization)], [[o5], [o5], [s1]]]), in([[s1, o4], o4, [operator(normalization, robust_scaler)], [step(normalization)], [[o4], [o4], [s1]]]), in([[s1, o3], o3, [operator(normalization, power_transformer)], [step(normalization)], [[o3], [o3], [s1]]]), in([[s1, o2], o2, [operator(discretization, binarizer)], [step(discretization)], [[o2], [o2], [s1]]]), in([[s1, o1], o1, [operator(discretization, kbins)], [step(discretization)], [[o1], [o1], [s1]]]), in([[sc1, oc1, cco1, c1], cco1, [mandatory_order([discretization, normalization], dt)], [mandatory_order([discretization, normalization], classification), operator(classification, dt)], [[cco1], [oc1, cco1], [sc1, c1]]]), in([[sc1, oc2, cco1, c1], cco1, [mandatory_order([discretization, normalization], knn)], [mandatory_order([discretization, normalization], classification), operator(classification, knn)], [[cco1], [oc2, cco1], [sc1, c1]]]), in([[sc1, s1, s1, oc1, g2], g2, [pipeline([discretization, normalization], dt)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), in([[sc1, s1, s1, oc2, g2], g2, [pipeline([discretization, normalization], knn)], [step(discretization), step(normalization), prolog(('\\='(discretization, classification), '\\='(normalization, classification), '\\='(discretization, normalization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]]), in([[sc1, s1, oc1, g1], g1, [pipeline([discretization], dt)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), in([[sc1, s1, oc2, g1], g1, [pipeline([discretization], knn)], [step(discretization), prolog('\\='(discretization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), in([[sc1, s1, oc1, g1], g1, [pipeline([normalization], dt)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, dt)], [[g1], [oc1, g1], [sc1, s1]]]), in([[sc1, s1, oc2, g1], g1, [pipeline([normalization], knn)], [step(normalization), prolog('\\='(normalization, classification)), operator(classification, knn)], [[g1], [oc2, g1], [sc1, s1]]]), in([[sc1, oc2, hc10], hc10, [hyperparameter(knn, metric, choice)], [operator(classification, knn)], [[hc10], [oc2, hc10], [sc1]]]), in([[sc1, oc2, hc9], hc9, [hyperparameter(knn, weights, choice)], [operator(classification, knn)], [[hc9], [oc2, hc9], [sc1]]]), in([[sc1, oc2, hc8], hc8, [hyperparameter(knn, n_neighbors, randint)], [operator(classification, knn)], [[hc8], [oc2, hc8], [sc1]]]), in([[sc1, oc1, hc7], hc7, [hyperparameter(dt, criterion, choice)], [operator(classification, dt)], [[hc7], [oc1, hc7], [sc1]]]), in([[sc1, oc1, hc6], hc6, [hyperparameter(dt, splitter, choice)], [operator(classification, dt)], [[hc6], [oc1, hc6], [sc1]]]), in([[sc1, oc1, hc5], hc5, [hyperparameter(dt, max_leaf_nodes, randint)], [operator(classification, dt)], [[hc5], [oc1, hc5], [sc1]]]), in([[sc1, oc1, hc4], hc4, [hyperparameter(dt, max_features, randint)], [operator(classification, dt)], [[hc4], [oc1, hc4], [sc1]]]), in([[sc1, oc1, hc3], hc3, [hyperparameter(dt, min_samples_leaf, randint)], [operator(classification, dt)], [[hc3], [oc1, hc3], [sc1]]]), in([[sc1, oc1, hc2], hc2, [hyperparameter(dt, min_samples_split, randint)], [operator(classification, dt)], [[hc2], [oc1, hc2], [sc1]]]), in([[sc1, oc1, hc1], hc1, [hyperparameter(dt, max_depth, randint)], [operator(classification, dt)], [[hc1], [oc1, hc1], [sc1]]]), in([[s1, o5, h8], h8, [hyperparameter(standard, with_std, choice)], [operator(normalization, standard)], [[h8], [o5, h8], [s1]]]), in([[s1, o5, h7], h7, [hyperparameter(standard, with_mean, choice)], [operator(normalization, standard)], [[h7], [o5, h7], [s1]]]), in([[s1, o4, h6], h6, [hyperparameter(robust_scaler, with_scaling, choice)], [operator(normalization, robust_scaler)], [[h6], [o4, h6], [s1]]]), in([[s1, o4, h5], h5, [hyperparameter(robust_scaler, with_centering, choice)], [operator(normalization, robust_scaler)], [[h5], [o4, h5], [s1]]]), in([[s1, o2, h4], h4, [hyperparameter(binarizer, threshold, choice)], [operator(discretization, binarizer)], [[h4], [o2, h4], [s1]]]), in([[s1, o1, h3], h3, [hyperparameter(kbins, strategy, choice)], [operator(discretization, kbins)], [[h3], [o1, h3], [s1]]]), in([[s1, o1, h2], h2, [hyperparameter(kbins, encode, choice)], [operator(discretization, kbins)], [[h2], [o1, h2], [s1]]]), in([[s1, o1, h1], h1, [hyperparameter(kbins, n_bins, randint)], [operator(discretization, kbins)], [[h1], [o1, h1], [s1]]]), in([[sc1, oc1, g0], g0, [pipeline([], dt)], [operator(classification, dt)], [[g0], [oc1, g0], [sc1]]]), in([[sc1, oc2, g0], g0, [pipeline([], knn)], [operator(classification, knn)], [[g0], [oc2, g0], [sc1]]]), in([[sc1, oc2, hc10, dc10], dc10, [domain(knn, metric, [minkowski, euclidean, manhattan])], [hyperparameter(knn, metric, choice)], [[dc10], [oc2, hc10, dc10], [sc1]]]), in([[sc1, oc2, hc9, dc9], dc9, [domain(knn, weights, [uniform, distance])], [hyperparameter(knn, weights, choice)], [[dc9], [oc2, hc9, dc9], [sc1]]]), in([[sc1, oc2, hc8, dc8], dc8, [domain(knn, n_neighbors, [3, 19])], [hyperparameter(knn, n_neighbors, randint)], [[dc8], [oc2, hc8, dc8], [sc1]]]), in([[sc1, oc1, hc7, dc7], dc7, [domain(dt, criterion, [gini, entropy])], [hyperparameter(dt, criterion, choice)], [[dc7], [oc1, hc7, dc7], [sc1]]]), in([[sc1, oc1, hc6, dc6], dc6, [domain(dt, splitter, [best, random])], [hyperparameter(dt, splitter, choice)], [[dc6], [oc1, hc6, dc6], [sc1]]]), in([[sc1, oc1, hc5, dc5], dc5, [domain(dt, max_leaf_nodes, [2, 5])], [hyperparameter(dt, max_leaf_nodes, randint)], [[dc5], [oc1, hc5, dc5], [sc1]]]), in([[sc1, oc1, hc4, dc4], dc4, [domain(dt, max_features, [1, 3])], [hyperparameter(dt, max_features, randint)], [[dc4], [oc1, hc4, dc4], [sc1]]]), in([[sc1, oc1, hc3, dc3], dc3, [domain(dt, min_samples_leaf, [1, 5])], [hyperparameter(dt, min_samples_leaf, randint)], [[dc3], [oc1, hc3, dc3], [sc1]]]), in([[sc1, oc1, hc2, dc2], dc2, [domain(dt, min_samples_split, [2, 5])], [hyperparameter(dt, min_samples_split, randint)], [[dc2], [oc1, hc2, dc2], [sc1]]]), in([[sc1, oc1, hc1, dc1], dc1, [domain(dt, max_depth, [1, 4])], [hyperparameter(dt, max_depth, randint)], [[dc1], [oc1, hc1, dc1], [sc1]]]), in([[s1, o5, h8, d8], d8, [domain(standard, with_std, [true, false])], [hyperparameter(standard, with_std, choice)], [[d8], [o5, h8, d8], [s1]]]), in([[s1, o5, h7, d7], d7, [domain(standard, with_mean, [true, false])], [hyperparameter(standard, with_mean, choice)], [[d7], [o5, h7, d7], [s1]]]), in([[s1, o4, h6, d6], d6, [domain(robust_scaler, with_scaling, [true, false])], [hyperparameter(robust_scaler, with_scaling, choice)], [[d6], [o4, h6, d6], [s1]]]), in([[s1, o4, h5, d5], d5, [domain(robust_scaler, with_centering, [true, false])], [hyperparameter(robust_scaler, with_centering, choice)], [[d5], [o4, h5, d5], [s1]]]), in([[s1, o2, h4, d4], d4, [domain(binarizer, threshold, [0.0, 0.5, 2.0, 5.0])], [hyperparameter(binarizer, threshold, choice)], [[d4], [o2, h4, d4], [s1]]]), in([[s1, o1, h3, d3], d3, [domain(kbins, strategy, [uniform, quantile, kmeans])], [hyperparameter(kbins, strategy, choice)], [[d3], [o1, h3, d3], [s1]]]), in([[s1, o1, h2, d2], d2, [domain(kbins, encode, [onehot, 'onehot-dense', ordinal])], [hyperparameter(kbins, encode, choice)], [[d2], [o1, h2, d2], [s1]]]), in([[s1, o1, h1, d1], d1, [domain(kbins, n_bins, [3, 7])], [hyperparameter(kbins, n_bins, randint)], [[d1], [o1, h1, d1], [s1]]]), out([[sc1, s1, s1, oc1, g2], g2, [pipeline([normalization, discretization], dt)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, dt)], [[g2], [oc1, g2], [sc1, s1]]]), out([[sc1, s1, s1, oc2, g2], g2, [pipeline([normalization, discretization], knn)], [step(normalization), step(discretization), prolog(('\\='(normalization, classification), '\\='(discretization, classification), '\\='(normalization, discretization))), operator(classification, knn)], [[g2], [oc2, g2], [sc1, s1]]])]