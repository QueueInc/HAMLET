{
     "space": {
          "prototype": {
               "choice": [
                    "normalization_discretization_imputation_features_classification",
                    "discretization_normalization_imputation_features_classification",
                    "imputation_discretization_normalization_features_classification",
                    "imputation_features_discretization_normalization_classification",
                    "features_discretization_normalization_imputation_classification",
                    "normalization_features_discretization_imputation_classification",
                    "normalization_features_imputation_discretization_classification",
                    "discretization_normalization_features_imputation_classification",
                    "discretization_imputation_normalization_features_classification",
                    "discretization_features_normalization_imputation_classification",
                    "normalization_imputation_discretization_features_classification",
                    "discretization_features_imputation_normalization_classification",
                    "discretization_imputation_features_normalization_classification",
                    "imputation_normalization_features_discretization_classification",
                    "features_normalization_discretization_imputation_classification",
                    "features_normalization_imputation_discretization_classification",
                    "features_imputation_normalization_discretization_classification",
                    "imputation_discretization_features_normalization_classification",
                    "features_imputation_discretization_normalization_classification",
                    "features_discretization_imputation_normalization_classification",
                    "normalization_imputation_features_discretization_classification",
                    "normalization_discretization_features_imputation_classification",
                    "imputation_features_normalization_discretization_classification",
                    "imputation_normalization_discretization_features_classification"
               ]
          },
          "discretization": {
               "choice": [
                    {
                         "type": "FunctionTransformer"
                    },
                    {
                         "type": "KBinsDiscretizer",
                         "n_bins": {
                              "randint": [
                                   3,
                                   7
                              ]
                         },
                         "encode": {
                              "choice": [
                                   "onehot",
                                   "onehot-dense",
                                   "ordinal"
                              ]
                         },
                         "strategy": {
                              "choice": [
                                   "uniform",
                                   "quantile",
                                   "kmeans"
                              ]
                         }
                    },
                    {
                         "type": "Binarizer",
                         "threshold": {
                              "choice": [
                                   0.0,
                                   0.5,
                                   2.0,
                                   5.0
                              ]
                         }
                    }
               ]
          },
          "normalization": {
               "choice": [
                    {
                         "type": "FunctionTransformer"
                    },
                    {
                         "type": "PowerTransformer"
                    },
                    {
                         "type": "RobustScaler",
                         "with_centering": {
                              "choice": [
                                   true,
                                   false
                              ]
                         },
                         "with_scaling": {
                              "choice": [
                                   true,
                                   false
                              ]
                         }
                    },
                    {
                         "type": "StandardScaler",
                         "with_mean": {
                              "choice": [
                                   true,
                                   false
                              ]
                         },
                         "with_std": {
                              "choice": [
                                   true,
                                   false
                              ]
                         }
                    },
                    {
                         "type": "MinMaxScaler"
                    }
               ]
          },
          "features": {
               "choice": [
                    {
                         "type": "FunctionTransformer"
                    },
                    {
                         "type": "SelectKBest",
                         "k": {
                              "randint": [
                                   1,
                                   4
                              ]
                         }
                    },
                    {
                         "type": "PCA",
                         "n_components": {
                              "randint": [
                                   1,
                                   4
                              ]
                         }
                    }
               ]
          },
          "imputation": {
               "choice": [
                    {
                         "type": "FunctionTransformer"
                    },
                    {
                         "type": "SimpleImputer",
                         "strategy": {
                              "choice": [
                                   "most_frequent",
                                   "constant"
                              ]
                         }
                    },
                    {
                         "type": "IterativeImputer",
                         "initial_strategy": {
                              "choice": [
                                   "most_frequent",
                                   "constant"
                              ]
                         },
                         "imputation_order": {
                              "choice": [
                                   "ascending",
                                   "descending",
                                   "roman",
                                   "arabic",
                                   "random"
                              ]
                         }
                    }
               ]
          },
          "classification": {
               "choice": [
                    {
                         "type": "DecisionTreeClassifier",
                         "max_depth": {
                              "randint": [
                                   1,
                                   4
                              ]
                         },
                         "min_samples_split": {
                              "randint": [
                                   2,
                                   5
                              ]
                         },
                         "min_samples_leaf": {
                              "randint": [
                                   1,
                                   5
                              ]
                         },
                         "max_features": {
                              "randint": [
                                   1,
                                   3
                              ]
                         },
                         "max_leaf_nodes": {
                              "randint": [
                                   2,
                                   5
                              ]
                         },
                         "splitter": {
                              "choice": [
                                   "best",
                                   "random"
                              ]
                         },
                         "criterion": {
                              "choice": [
                                   "gini",
                                   "entropy"
                              ]
                         }
                    },
                    {
                         "type": "KNeighborsClassifier",
                         "n_neighbors": {
                              "randint": [
                                   3,
                                   19
                              ]
                         },
                         "weights": {
                              "choice": [
                                   "uniform",
                                   "distance"
                              ]
                         },
                         "metric": {
                              "choice": [
                                   "minkowski",
                                   "euclidean",
                                   "manhattan"
                              ]
                         }
                    },
                    {
                         "type": "GaussianNB"
                    }
               ]
          }
     },
     "template_constraints": [
          {
               "normalization": {
                    "type": {
                         "nin": [
                              "PowerTransformer",
                              "RobustScaler",
                              "StandardScaler",
                              "MinMaxScaler"
                         ]
                    }
               },
               "classification": {
                    "type": {
                         "eq": "KNeighborsClassifier"
                    }
               }
          },
          {
               "discretization": {
                    "type": {
                         "nin": [
                              "KBinsDiscretizer",
                              "Binarizer"
                         ]
                    }
               },
               "classification": {
                    "type": {
                         "eq": "DecisionTreeClassifier"
                    }
               }
          },
          {
               "normalization": {
                    "type": {
                         "in": [
                              "PowerTransformer",
                              "RobustScaler",
                              "StandardScaler",
                              "MinMaxScaler"
                         ]
                    }
               },
               "classification": {
                    "type": {
                         "eq": "DecisionTreeClassifier"
                    }
               }
          },
          {
               "prototype": {
                    "nin": [
                         "discretization_normalization_imputation_features_classification",
                         "imputation_discretization_normalization_features_classification",
                         "imputation_features_discretization_normalization_classification",
                         "features_discretization_normalization_imputation_classification",
                         "discretization_normalization_features_imputation_classification",
                         "discretization_imputation_normalization_features_classification",
                         "discretization_features_normalization_imputation_classification",
                         "discretization_features_imputation_normalization_classification",
                         "discretization_imputation_features_normalization_classification",
                         "imputation_discretization_features_normalization_classification",
                         "features_imputation_discretization_normalization_classification",
                         "features_discretization_imputation_normalization_classification"
                    ]
               },
               "classification": {
                    "type": {
                         "eq": "DecisionTreeClassifier"
                    }
               }
          },
          {
               "prototype": {
                    "nin": [
                         "discretization_normalization_imputation_features_classification",
                         "imputation_discretization_normalization_features_classification",
                         "imputation_features_discretization_normalization_classification",
                         "features_discretization_normalization_imputation_classification",
                         "discretization_normalization_features_imputation_classification",
                         "discretization_imputation_normalization_features_classification",
                         "discretization_features_normalization_imputation_classification",
                         "discretization_features_imputation_normalization_classification",
                         "discretization_imputation_features_normalization_classification",
                         "imputation_discretization_features_normalization_classification",
                         "features_imputation_discretization_normalization_classification",
                         "features_discretization_imputation_normalization_classification"
                    ]
               },
               "classification": {
                    "type": {
                         "eq": "KNeighborsClassifier"
                    }
               }
          },
          {
               "prototype": {
                    "nin": [
                         "discretization_normalization_imputation_features_classification",
                         "imputation_discretization_normalization_features_classification",
                         "imputation_features_discretization_normalization_classification",
                         "features_discretization_normalization_imputation_classification",
                         "discretization_normalization_features_imputation_classification",
                         "discretization_imputation_normalization_features_classification",
                         "discretization_features_normalization_imputation_classification",
                         "discretization_features_imputation_normalization_classification",
                         "discretization_imputation_features_normalization_classification",
                         "imputation_discretization_features_normalization_classification",
                         "features_imputation_discretization_normalization_classification",
                         "features_discretization_imputation_normalization_classification"
                    ]
               },
               "classification": {
                    "type": {
                         "eq": "GaussianNB"
                    }
               }
          }
     ],
     "instance_constraints": [
          {
               "discretization": {
                    "type": "KBinsDiscretizer"
               },
               "normalization": {
                    "type": "PowerTransformer"
               },
               "features": {
                    "type": "SelectKBest"
               },
               "imputation": {
                    "type": "SimpleImputer"
               },
               "classification": {
                    "type": "DecisionTreeClassifier"
               },
               "prototype": "discretization_normalization_features_imputation_classification"
          }
     ],
     "points_to_evaluate": [
          {
               "prototype": "discretization_features_imputation_normalization_classification",
               "discretization": {
                    "threshold": 5.0,
                    "type": "Binarizer"
               },
               "features": {
                    "k": 2,
                    "type": "SelectKBest"
               },
               "imputation": {
                    "strategy": "most_frequent",
                    "type": "SimpleImputer"
               },
               "normalization": {
                    "type": "PowerTransformer"
               },
               "classification": {
                    "type": "GaussianNB"
               }
          }
     ],
     "evaluated_rewards": [
          {
               "accuracy": 0.7813782595446433,
               "status": "success"
          }
     ]
}